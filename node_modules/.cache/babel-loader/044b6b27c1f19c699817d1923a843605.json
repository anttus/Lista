{"remainingRequest":"/Users/anttu/Documents/Git/NodeNote/new_ui/node_modules/babel-loader/lib/index.js!/Users/anttu/Documents/Git/NodeNote/new_ui/node_modules/vuetify-loader/lib/loader.js!/Users/anttu/Documents/Git/NodeNote/new_ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/anttu/Documents/Git/NodeNote/new_ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anttu/Documents/Git/NodeNote/new_ui/src/components/Dialogs/Dialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/anttu/Documents/Git/NodeNote/new_ui/src/components/Dialogs/Dialog.vue","mtime":1548594037148},{"path":"/Users/anttu/Documents/Git/NodeNote/new_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/anttu/Documents/Git/NodeNote/new_ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/anttu/Documents/Git/NodeNote/new_ui/node_modules/vuetify-loader/lib/loader.js","mtime":499162500000},{"path":"/Users/anttu/Documents/Git/NodeNote/new_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/anttu/Documents/Git/NodeNote/new_ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _Promise from \"/Users/anttu/Documents/Git/NodeNote/new_ui/node_modules/@babel/runtime-corejs2/core-js/promise\";\nimport _Object$assign from \"/Users/anttu/Documents/Git/NodeNote/new_ui/node_modules/@babel/runtime-corejs2/core-js/object/assign\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/**\n * Vuetify Confirm Dialog component\n *\n * Insert component where you want to use it:\n * <confirm ref=\"confirm\"></confirm>\n *\n * Call it:\n * this.$refs.confirm.open('Delete', 'Are you sure?', { color: 'red' }).then((confirm) => {})\n * Or use await:\n * if (await this.$refs.confirm.open('Delete', 'Are you sure?', { color: 'red' })) {\n *   // yes\n * }\n * else {\n *   // cancel\n * }\n *\n * Alternatively you can place it in main App component and access it globally via this.$root.$confirm\n * <template>\n *   <v-app>\n *     ...\n *     <confirm ref=\"confirm\"></confirm>\n *   </v-app>\n * </template>\n *\n * mounted() {\n *   this.$root.$confirm = this.$refs.confirm.open\n * }\n */\nexport default {\n  data: function data() {\n    return {\n      dialog: false,\n      resolve: null,\n      reject: null,\n      message: null,\n      title: null,\n      options: {\n        color: \"primary\",\n        width: 290,\n        zIndex: 200\n      }\n    };\n  },\n  methods: {\n    open: function open(title, message, options) {\n      var _this = this;\n\n      this.dialog = true;\n      this.title = title;\n      this.message = message;\n      this.options = _Object$assign(this.options, options);\n      return new _Promise(function (resolve, reject) {\n        _this.resolve = resolve;\n        _this.reject = reject;\n      });\n    },\n    agree: function agree() {\n      this.resolve(true);\n      this.dialog = false;\n    },\n    cancel: function cancel() {\n      this.resolve(false);\n      this.dialog = false;\n    }\n  }\n};",{"version":3,"sources":["Dialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,eAAA;AACA,EAAA,IAAA,EAAA;AAAA,WAAA;AACA,MAAA,MAAA,EAAA,KADA;AAEA,MAAA,OAAA,EAAA,IAFA;AAGA,MAAA,MAAA,EAAA,IAHA;AAIA,MAAA,OAAA,EAAA,IAJA;AAKA,MAAA,KAAA,EAAA,IALA;AAMA,MAAA,OAAA,EAAA;AACA,QAAA,KAAA,EAAA,SADA;AAEA,QAAA,KAAA,EAAA,GAFA;AAGA,QAAA,MAAA,EAAA;AAHA;AANA,KAAA;AAAA,GADA;AAaA,EAAA,OAAA,EAAA;AACA,IAAA,IADA,gBACA,KADA,EACA,OADA,EACA,OADA,EACA;AAAA;;AACA,WAAA,MAAA,GAAA,IAAA;AACA,WAAA,KAAA,GAAA,KAAA;AACA,WAAA,OAAA,GAAA,OAAA;AACA,WAAA,OAAA,GAAA,eAAA,KAAA,OAAA,EAAA,OAAA,CAAA;AACA,aAAA,aAAA,UAAA,OAAA,EAAA,MAAA,EAAA;AACA,QAAA,KAAA,CAAA,OAAA,GAAA,OAAA;AACA,QAAA,KAAA,CAAA,MAAA,GAAA,MAAA;AACA,OAHA,CAAA;AAIA,KAVA;AAWA,IAAA,KAXA,mBAWA;AACA,WAAA,OAAA,CAAA,IAAA;AACA,WAAA,MAAA,GAAA,KAAA;AACA,KAdA;AAeA,IAAA,MAfA,oBAeA;AACA,WAAA,OAAA,CAAA,KAAA;AACA,WAAA,MAAA,GAAA,KAAA;AACA;AAlBA;AAbA,CAAA","sourcesContent":["<template>\n  <div data-app>\n    <v-dialog\n      v-model=\"dialog\"\n      :max-width=\"options.width\"\n      @keydown.esc=\"cancel\"\n      v-bind:style=\"{ zIndex: options.zIndex }\"\n    >\n      <v-card>\n        <v-toolbar dark :color=\"options.color\" dense flat>\n          <v-toolbar-title class=\"white--text\">{{ title }}</v-toolbar-title>\n        </v-toolbar>\n        <v-card-text v-show=\"!!message\">{{ message }}</v-card-text>\n        <v-card-actions class=\"pt-0\">\n          <v-spacer></v-spacer>\n          <v-btn color=\"primary darken-1\" flat=\"flat\" @click.native=\"agree\">Yes</v-btn>\n          <v-btn color=\"grey\" flat=\"flat\" @click.native=\"cancel\">Cancel</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </div>\n</template>\n\n<script>\n/**\n * Vuetify Confirm Dialog component\n *\n * Insert component where you want to use it:\n * <confirm ref=\"confirm\"></confirm>\n *\n * Call it:\n * this.$refs.confirm.open('Delete', 'Are you sure?', { color: 'red' }).then((confirm) => {})\n * Or use await:\n * if (await this.$refs.confirm.open('Delete', 'Are you sure?', { color: 'red' })) {\n *   // yes\n * }\n * else {\n *   // cancel\n * }\n *\n * Alternatively you can place it in main App component and access it globally via this.$root.$confirm\n * <template>\n *   <v-app>\n *     ...\n *     <confirm ref=\"confirm\"></confirm>\n *   </v-app>\n * </template>\n *\n * mounted() {\n *   this.$root.$confirm = this.$refs.confirm.open\n * }\n */\nexport default {\n  data: () => ({\n    dialog: false,\n    resolve: null,\n    reject: null,\n    message: null,\n    title: null,\n    options: {\n      color: \"primary\",\n      width: 290,\n      zIndex: 200\n    }\n  }),\n  methods: {\n    open(title, message, options) {\n      this.dialog = true;\n      this.title = title;\n      this.message = message;\n      this.options = Object.assign(this.options, options);\n      return new Promise((resolve, reject) => {\n        this.resolve = resolve;\n        this.reject = reject;\n      });\n    },\n    agree() {\n      this.resolve(true);\n      this.dialog = false;\n    },\n    cancel() {\n      this.resolve(false);\n      this.dialog = false;\n    }\n  }\n};\n</script>"],"sourceRoot":"src/components"}]}