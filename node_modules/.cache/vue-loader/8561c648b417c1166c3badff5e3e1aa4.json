{"remainingRequest":"/Users/anttu/Documents/Git/NodeNote/new_ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anttu/Documents/Git/NodeNote/new_ui/src/components/SideBar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/anttu/Documents/Git/NodeNote/new_ui/src/components/SideBar.vue","mtime":1549303324776},{"path":"/Users/anttu/Documents/Git/NodeNote/new_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/anttu/Documents/Git/NodeNote/new_ui/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/anttu/Documents/Git/NodeNote/new_ui/node_modules/vuetify-loader/lib/loader.js","mtime":499162500000},{"path":"/Users/anttu/Documents/Git/NodeNote/new_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/anttu/Documents/Git/NodeNote/new_ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Slide from \"./SideMenu/slide\";\nimport DeleteDialog from \"./dialogs/DeleteDialog\";\nimport ShareDialog from \"./dialogs/ShareDialog\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nconst db = require(\"../../api-server/db/dbController\");\n\nexport default {\n  data() {\n    return {\n      curUser: firebase.auth().currentUser,\n      userLists: [],\n      currentList: null, // Localstorage system?\n      items: []\n    };\n  },\n  components: {\n    Slide,\n    DeleteDialog,\n    ShareDialog\n  },\n  methods: {\n    openDeleteDialog(list) {\n      this.$root.$delete\n        .open(\n          \"List removal\",\n          'Are you sure you want to delete the list \"' + list.Name + '\"?',\n          {\n            color: \"gray\"\n          }\n        )\n        .then(value => {\n          if (value) {\n            db.deleteList(list.List_id).then(() => {\n              this.getUserLists();\n            });\n          }\n        });\n    },\n    openShareDialog(listName) {\n      this.$root.$share\n        .open(\n          \"List sharing\",\n          'Who do you want to share the list \"' + listName + '\" with?',\n          {\n            color: \"gray\"\n          }\n        )\n        .then(value => {\n          console.log(value);\n        });\n    },\n    openList(list) {\n      this.currentList = list;\n      console.log(\"Current list: \" + this.currentList.List_id);\n      this.loadItems(this.currentList.List_id);\n    },\n    signOut() {\n      firebase\n        .auth()\n        .signOut()\n        .then(() => {\n          this.$router.replace(\"login\");\n        });\n    },\n    getUserLists() {\n      db.getListsOfUser(this.curUser.uid).then(res => {\n        this.userLists = res.data;\n        if (this.userLists) {\n          this.currentList = this.userLists[0];\n          this.loadItems(this.currentList.List_id);\n        }\n      });\n    },\n    // Used from Header, that gets the list name from AddListDialog\n    addList(listName) {\n      db.addList(this.curUser.uid, listName).then(() => {\n        this.getUserLists();\n      });\n    },\n    addItem(newItem) {\n      if (this.currentList.List_id) {\n        db.addItem(this.currentList.List_id, newItem.Name).then(() => {\n          this.loadItems(this.currentList.List_id);\n        });\n      }\n    },\n    loadItems(listId) {\n      db.getItems(listId)\n        .then(value => {\n          this.items.push(value.data);\n        })\n        .then(() => {\n          this.$emit(\"cur-list-name\", this.currentList.Name);\n          this.$emit(\"items-list\", this.items[0]);\n          this.items = [];\n        });\n    },\n    deleteItem(listId, itemId, itemName) {\n      if (listId && itemId && itemName) db.deleteItem(listId, itemId, itemName);\n    },\n    shareList(email) {\n      if (this.$refs.share.alertEmail(email)) {\n        db.checkUserExists(email).then(result => {\n          result = result.data[0][\"COUNT(*)\"];\n          if (result === 1) db.shareList(email);\n          else this.$refs.share.alertShare(email);\n        });\n      }\n    }\n  },\n  mounted() {\n    this.getUserLists();\n    this.$root.$delete = this.$refs.delete;\n    this.$root.$share = this.$refs.share;\n  }\n};\n",{"version":3,"sources":["SideBar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"SideBar.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <DeleteDialog ref=\"delete\"/>\n    <ShareDialog ref=\"share\" v-on:agree-share=\"shareList\"/>\n    <Slide right>\n      <div class=\"loggedInUser\">{{curUser.email}}</div>\n      <div v-bind:key=\"list.id\" v-for=\"list in userLists\">\n        <div class=\"listElement\" href=\"#\">\n          <span class=\"iconBtn shareBtn\" @click=\"openShareDialog(list.Name)\">\n            <font-awesome-icon icon=\"share\"/>\n          </span>\n          <span class=\"listName\" @click=\"openList(list)\">{{list.Name}}</span>\n          <span v-bind:list=\"list\" class=\"iconBtn deleteBtn\" @click=\"openDeleteDialog(list)\">\n            <font-awesome-icon icon=\"trash\"/>\n          </span>\n        </div>\n      </div>\n      <button @click=\"signOut\" class=\"signOutBtn\">\n        <font-awesome-icon icon=\"sign-out-alt\"/>Sign out\n      </button>\n    </Slide>\n  </div>\n</template>\n\n<script>\nimport Slide from \"./SideMenu/slide\";\nimport DeleteDialog from \"./dialogs/DeleteDialog\";\nimport ShareDialog from \"./dialogs/ShareDialog\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nconst db = require(\"../../api-server/db/dbController\");\n\nexport default {\n  data() {\n    return {\n      curUser: firebase.auth().currentUser,\n      userLists: [],\n      currentList: null, // Localstorage system?\n      items: []\n    };\n  },\n  components: {\n    Slide,\n    DeleteDialog,\n    ShareDialog\n  },\n  methods: {\n    openDeleteDialog(list) {\n      this.$root.$delete\n        .open(\n          \"List removal\",\n          'Are you sure you want to delete the list \"' + list.Name + '\"?',\n          {\n            color: \"gray\"\n          }\n        )\n        .then(value => {\n          if (value) {\n            db.deleteList(list.List_id).then(() => {\n              this.getUserLists();\n            });\n          }\n        });\n    },\n    openShareDialog(listName) {\n      this.$root.$share\n        .open(\n          \"List sharing\",\n          'Who do you want to share the list \"' + listName + '\" with?',\n          {\n            color: \"gray\"\n          }\n        )\n        .then(value => {\n          console.log(value);\n        });\n    },\n    openList(list) {\n      this.currentList = list;\n      console.log(\"Current list: \" + this.currentList.List_id);\n      this.loadItems(this.currentList.List_id);\n    },\n    signOut() {\n      firebase\n        .auth()\n        .signOut()\n        .then(() => {\n          this.$router.replace(\"login\");\n        });\n    },\n    getUserLists() {\n      db.getListsOfUser(this.curUser.uid).then(res => {\n        this.userLists = res.data;\n        if (this.userLists) {\n          this.currentList = this.userLists[0];\n          this.loadItems(this.currentList.List_id);\n        }\n      });\n    },\n    // Used from Header, that gets the list name from AddListDialog\n    addList(listName) {\n      db.addList(this.curUser.uid, listName).then(() => {\n        this.getUserLists();\n      });\n    },\n    addItem(newItem) {\n      if (this.currentList.List_id) {\n        db.addItem(this.currentList.List_id, newItem.Name).then(() => {\n          this.loadItems(this.currentList.List_id);\n        });\n      }\n    },\n    loadItems(listId) {\n      db.getItems(listId)\n        .then(value => {\n          this.items.push(value.data);\n        })\n        .then(() => {\n          this.$emit(\"cur-list-name\", this.currentList.Name);\n          this.$emit(\"items-list\", this.items[0]);\n          this.items = [];\n        });\n    },\n    deleteItem(listId, itemId, itemName) {\n      if (listId && itemId && itemName) db.deleteItem(listId, itemId, itemName);\n    },\n    shareList(email) {\n      if (this.$refs.share.alertEmail(email)) {\n        db.checkUserExists(email).then(result => {\n          result = result.data[0][\"COUNT(*)\"];\n          if (result === 1) db.shareList(email);\n          else this.$refs.share.alertShare(email);\n        });\n      }\n    }\n  },\n  mounted() {\n    this.getUserLists();\n    this.$root.$delete = this.$refs.delete;\n    this.$root.$share = this.$refs.share;\n  }\n};\n</script>\n\n<style scoped>\n.iconBtn {\n  padding: 15px;\n}\n.shareBtn:hover {\n  color: rgb(63, 173, 91);\n  transition: 0.5s;\n}\n.deleteBtn:hover {\n  color: rgb(187, 67, 63);\n  transition: 0.5s;\n}\n.listName:hover {\n  color: rgb(240, 202, 77);\n  transition: 0.5s;\n}\n.activeList:active {\n  color: rgb(240, 202, 77);\n}\n.listElement {\n  padding: 0;\n  padding-left: 0;\n  align-content: left;\n  margin: 0;\n  color: #f4f4f4;\n}\n.signOutBtn {\n  color: #f4f4f4;\n  font-weight: bold;\n  position: fixed;\n  bottom: 0px;\n  text-align: left !important;\n  background-color: #ff6961;\n  width: 300px;\n  display: block;\n  padding-left: 30px;\n}\n.signOutBtn:hover {\n  opacity: 0.8;\n  transition: 0.5s;\n}\n.loggedInUser {\n  padding: 0;\n  padding-left: 30px;\n  margin-bottom: 10px;\n  color: #f4f4f4b2;\n  font-size: 16px;\n}\n</style>\n"]}]}